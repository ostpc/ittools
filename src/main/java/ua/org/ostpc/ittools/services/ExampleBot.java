package ua.org.ostpc.ittools.services;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.send.SendSticker;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.PhotoSize;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.stickers.Sticker;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ua.org.ostpc.ittools.dao.TelegramusRepository;
import ua.org.ostpc.ittools.entity.Telegramus;

import javax.annotation.PostConstruct;
import java.util.Comparator;
import java.util.List;

@Configuration
@Component
public class ExampleBot extends TelegramLongPollingBot {




    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    public TelegramusRepository telegramusRepository;


    private static final Logger logger = LoggerFactory.getLogger(ExampleBot.class);

    @Value("${bot.token}")
    private String token;

    @Value("${bot.busername}")
    private String busername;

    @Override
    public String getBotToken() {
        return token;
    }

    @Override

    public String getBotUsername() {
        return busername;
    }

    @Override

    public void onUpdateReceived (Update update) {
        if (update.hasMessage() && update.getMessage().hasText() && update.getMessage().getText().equals("Привет")) {

            Message message = update.getMessage();
            User s = message.getFrom();
            String tname = s.getUserName();

            //long k = 3;
            String result = "";


            result += "test";


            StringBuilder sb = new StringBuilder(

            );
            sb.append("test1");


            sb.toString();


            Iterable<Telegramus> a = telegramusRepository.findAll();

            for (Telegramus b : a)
                if (tname.equals(b.getTelegramname())) {
                    result = " " + b.getUsername();
                }


            SendMessage response = new SendMessage();


            Long chatId = message.getChatId();

            response.setChatId(chatId);

            String text = message.getText();
            response.setText(text + result + " " + "Nice to meet you!)" + s.getId() + s.getUserName());


// Do what you want with response


            try {

                execute(response);

                logger.info("Sent message \"{}\" to {}", text, chatId);
            } catch (TelegramApiException e) {
                logger.error("Failed to send message \"{}\" to {} due to error: {}", text, chatId, e.getMessage());
            }
        }

    }



    @PostConstruct
    public void start() {
        logger.info("username: {}, token: {}", busername, token);

    }


}
